name: UI E2E Tests

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      OPENAI_API_KEY:
        required: true
      FIREWORKS_ACCOUNT_ID:
        required: true
      FIREWORKS_API_KEY:
        required: true
      S3_ACCESS_KEY_ID:
        required: true
      S3_SECRET_ACCESS_KEY:
        required: true

jobs:
  ui-tests-no-network:
    runs-on: ubuntu-latest
    steps:
      - name: Set DNS
        run: echo "127.0.0.1 howdy.tensorzero.com" | sudo tee -a /etc/hosts
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "22.9.0"

      - name: Download container images
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e
        with:
          pattern: build-*-container
          merge-multiple: true

      - name: Load `gateway` and `ui` containers
        run: |
          docker load < gateway-container.tar
          docker load < ui-container.tar

      # This allows us to use 'no-build' on subsequent steps
      - name: Build needed docker images
        working-directory: ui
        run: |
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml build fixtures mock-inference-provider

      - name: Start docker containers without external network access
        working-directory: ui
        run: |
          # Environment variables shared by the gateway and ui containers
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@clickhouse:8123/tensorzero_ui_fixtures" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_URL=http://gateway:3000" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_TAG=sha-${{ github.sha }}" >> fixtures/.env
          echo "TENSORZERO_UI_TAG=sha-${{ github.sha }}" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_CONFIG=/app/config/empty.toml" >> fixtures/.env
          echo "TENSORZERO_UI_CONFIG_PATH=/app/config/empty.toml" >> fixtures/.env

          export TENSORZERO_SKIP_LARGE_FIXTURES=1
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml -f ../ci/internal-network.yml up --no-build -d

      - name: Print Docker Compose logs
        if: always()
        working-directory: ui
        run: docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml logs -t

      - name: Print container health checks
        if: always()
        working-directory: ui
        run: docker inspect --format "{{json .State.Health }}" $(docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml ps -q ui) | jq

  ui-tests-gateway-prefix:
    runs-on: ubuntu-latest
    steps:
      - name: Set DNS
        run: echo "127.0.0.1 howdy.tensorzero.com" | sudo tee -a /etc/hosts
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "22.9.0"

      - name: Setup `pnpm`
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda

      - name: Install `pnpm` dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Playwright
        run: pnpm --filter=tensorzero-ui exec playwright install --with-deps chromium

      - name: Download container images
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e
        with:
          pattern: build-*-container
          merge-multiple: true

      - name: Load `gateway` and `ui` containers
        run: |
          docker load < gateway-container.tar
          docker load < ui-container.tar

      # This allows us to use 'no-build' on subsequent steps
      - name: Build needed docker images
        working-directory: ui
        run: |
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml build fixtures mock-inference-provider

      - name: Start Docker containers and apply fixtures
        working-directory: ui
        run: |
          # We set all of the environment variables for both the gateway and ui containers here
          # The 'ui-tests-e2e' job tests that the UI container starts without some of these variables set,
          echo "FIREWORKS_ACCOUNT_ID=fake_fireworks_account" >> fixtures/.env
          echo "FIREWORKS_API_KEY=not_used" >> fixtures/.env
          echo "ANTHROPIC_API_KEY=not_used" >> fixtures/.env
          echo "FIREWORKS_BASE_URL=http://mock-inference-provider:3030/fireworks/" >> fixtures/.env
          echo "OPENAI_API_KEY=not_used" >> fixtures/.env
          echo "OPENAI_BASE_URL=http://mock-inference-provider:3030/openai/" >> fixtures/.env
          echo "S3_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> fixtures/.env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> fixtures/.env
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@clickhouse:8123/tensorzero_ui_fixtures" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_URL=http://gateway:3000/custom/prefix" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_CONFIG=/app/config/tensorzero.base-path.toml" >> fixtures/.env
          echo "TENSORZERO_UI_CONFIG_PATH=/app/config/tensorzero.base-path.toml" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_TAG=sha-${{ github.sha }}" >> fixtures/.env
          echo "TENSORZERO_UI_TAG=sha-${{ github.sha }}" >> fixtures/.env
          export TENSORZERO_SKIP_LARGE_FIXTURES=1
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml up --no-build -d
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml wait fixtures

      - name: Run UI base-path E2E tests
        id: e2e_tests
        env:
          TENSORZERO_CI: 1
        run: pnpm ui:test:e2e-base-path

      - name: Print Docker Compose logs
        if: always()
        working-directory: ui
        run: docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml logs -t

      - name: Check for correct base-path in logs
        working-directory: ui
        run: |
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml logs -t | grep "/custom/prefix"

      - name: Print ClickHouse error logs
        if: always()
        run: docker exec fixtures-clickhouse-1 cat /var/log/clickhouse-server/clickhouse-server.err.log

      - name: Print ClickHouse trace logs
        if: always()
        run: docker exec fixtures-clickhouse-1 cat /var/log/clickhouse-server/clickhouse-server.log

      - name: Upload Playwright artifacts
        if: failure()
        uses: namespace-actions/upload-artifact@9a78c62e083914789d908952f9773e42744b9f68
        with:
          name: playwright-report-e2e-base-path
          path: |
            ui/playwright-report/
            ui/test-results/
          retention-days: 7

  ui-tests-e2e-credentials:
    runs-on: namespace-profile-tensorzero-8x16
    # We currently only run this job when we have secrets available, since we need to use an S3 object_store
    # In the future, we might want to fix this so that it can run in PR CI for external (forked) PRs
    # For now, it just runs in the merge queue and on prs from the main repo
    if: ${{ (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') || github.event_name == 'merge_group' }}    
    steps:
      # TODO - investigate why using the Namespace checkout action causes
      # 'tensorzero_core::built_info::GIT_COMMIT_HASH_SHORT' to be `None`
      - name: Check out the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: "22.9.0"

      - name: Setup `pnpm`
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda

      - name: Install `pnpm` dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Playwright
        run: pnpm --filter=tensorzero-ui exec playwright install --with-deps chromium

      - name: Cache `s3-fixtures`
        uses: namespacelabs/nscloud-cache-action@2f50e7d0f70475e6f59a55ba0f05eec9108e77cc
        with:
          path: |
            ./ui/fixtures/s3-fixtures

      # When we're regenerating the model inference cache, don't download the container images
      # The images will get built by `regenerate-model-inference-cache.sh`
      - name: Download container images
        if: inputs.regen_cache == false
        uses: namespace-actions/download-artifact@5c070f7d7ebdc47682b04aa736c76e46ff5f6e1e
        with:
          pattern: build-*-container
          merge-multiple: true

      - name: Load `gateway` and `ui` containers
        if: inputs.regen_cache == false
        run: |
          docker load < gateway-container.tar
          docker load < ui-container.tar

      - name: Set common fixture environment variables
        working-directory: ui
        run: |
          # Environment variables shared by the gateway and ui containers
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@clickhouse:8123/tensorzero_ui_fixtures" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_URL=http://gateway:3000" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_TAG=sha-${{ github.sha }}" >> fixtures/.env
          echo "TENSORZERO_UI_TAG=sha-${{ github.sha }}" >> fixtures/.env
          # We need these set in the ui container, so that we construct the correct optimizer config
          # to pass to 'experimentalLaunchOptimizationWorkflow'
          echo "FIREWORKS_BASE_URL=http://mock-inference-provider:3030/fireworks/" >> fixtures/.env
          echo "OPENAI_BASE_URL=http://mock-inference-provider:3030/openai/" >> fixtures/.env
          echo "FIREWORKS_ACCOUNT_ID=fake_fireworks_account" >> fixtures/.env
          echo "FIREWORKS_ACCOUNT_ID=${{ secrets.FIREWORKS_ACCOUNT_ID }}" >> fixtures/.env-gateway
          echo "FIREWORKS_API_KEY=${{ secrets.FIREWORKS_API_KEY }}" >> fixtures/.env-gateway
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> fixtures/.env-gateway
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> fixtures/.env-gateway
          echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> fixtures/.env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> fixtures/.env

      - name: Start docker containers
        run: |
          export TENSORZERO_SKIP_LARGE_FIXTURES=1
          docker compose -f ui/fixtures/docker-compose.e2e.yml -f ui/fixtures/docker-compose.ui.yml up -d
          docker compose -f ui/fixtures/docker-compose.e2e.yml -f ui/fixtures/docker-compose.ui.yml wait fixtures

      - name: Run UI E2E tests that require credentials
        id: e2e_tests_credentials
        env:
          TENSORZERO_CI: 1
        run: pnpm ui:test:e2e --grep "@credentials"

      - name: Print docker compose logs
        if: always()
        run: |
          docker compose -f ui/fixtures/docker-compose.e2e.yml -f ui/fixtures/docker-compose.ui.yml logs -t

      - name: Upload Playwright artifacts
        if: failure()
        uses: namespace-actions/upload-artifact@9a78c62e083914789d908952f9773e42744b9f68
        with:
          name: playwright-report-e2e-base-path
          path: |
            ui/playwright-report/
            ui/test-results/
          retention-days: 7

  # Test that the ui e2e tests pass with model inference cache included in this commit
  # and no model provider secrets set.
  ui-tests-e2e-existing-model-inference-cache:
    uses: ./.github/workflows/ui-tests-e2e-model-inference-cache.yml
    with:
      regen_cache: false
    secrets:
      S3_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
