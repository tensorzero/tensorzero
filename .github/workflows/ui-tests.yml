name: UI Tests

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-gateway:
    runs-on: namespace-profile-tensorzero-8x16

    steps:
      - uses: namespacelabs/nscloud-checkout-action@v6

      - name: Build `gateway` container
        working-directory: ui
        run: |
          docker build -f gateway/Dockerfile . -t tensorzero/gateway

      - name: Save `gateway` container
        run: docker save tensorzero/gateway > ui-tests-gateway-container-${{ github.run_id }}.tar

      - name: Upload `gateway` container as an artifact
        uses: namespace-actions/upload-artifact@v1
        with:
          name: ui-tests-gateway-container-${{ github.run_id }}
          path: ui-tests-gateway-container-${{ github.run_id }}.tar
          retention-days: 1
          if-no-files-found: error
          overwrite: false

  test:
    needs: build-gateway

    runs-on: namespace-profile-tensorzero-8x16

    strategy:
      matrix:
        clickhouse_version: ["24.12-alpine", "25.2-alpine", "latest-alpine"]

    steps:
      - uses: namespacelabs/nscloud-checkout-action@v6

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Setup `pnpm`
        uses: pnpm/action-setup@v4
        with:
          version: "10"

      - name: Install `pnpm` dependencies
        working-directory: ui
        run: pnpm install --frozen-lockfile

      - name: Setup the Namespace cache for `s3-fixtures`
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./ui/fixtures/s3-fixtures

      - name: Setup `wasm-pack`
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: ui/app/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Download `gateway` container
        uses: namespace-actions/download-artifact@v1
        with:
          name: ui-tests-gateway-container-${{ github.run_id }}
          path: .

      - name: Load `gateway` container
        run: docker load < ui-tests-gateway-container-${{ github.run_id }}.tar

      - name: Start Docker containers and apply fixtures
        working-directory: ui
        run: |
          echo "OPENAI_API_KEY=not_used" >> fixtures/.env
          echo "FIREWORKS_API_KEY=not_used" >> fixtures/.env
          echo "FIREWORKS_ACCOUNT_ID=not_used" >> fixtures/.env
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_ui_fixtures" >> fixtures/.env
          TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version }} docker compose -f fixtures/docker-compose.yml up -d --wait

      - name: Run `pnpm test`
        working-directory: ui
        env:
          OPENAI_API_KEY: not_used
          TENSORZERO_UI_CONFIG_PATH: fixtures/config/tensorzero.toml
          TENSORZERO_CLICKHOUSE_URL: http://chuser:chpassword@localhost:8123/tensorzero_ui_fixtures
          TENSORZERO_GATEWAY_URL: http://localhost:3000
        run: pnpm test

      - name: Print Docker Compose logs
        if: always()
        working-directory: ui
        run: docker compose -f fixtures/docker-compose.yml logs -t

      - name: Print ClickHouse error logs
        if: always()
        run: docker exec fixtures-clickhouse-1 cat /var/log/clickhouse-server/clickhouse-server.err.log

      - name: Print ClickHouse trace logs
        if: always()
        run: docker exec fixtures-clickhouse-1 cat /var/log/clickhouse-server/clickhouse-server.log

  test-e2e:
    needs: build-gateway

    runs-on: namespace-profile-tensorzero-8x16

    # We currently only run this job when we have secrets available, since we need to use an S3 object_store
    # In the future, we might want to fix this so that it can run in PR CI for external (forked) PRs
    # For now, it just runs in the merge queue and on prs from the main repo
    if: ${{ (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') || github.event_name == 'merge_group' }}

    steps:
      - uses: namespacelabs/nscloud-checkout-action@v6

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Setup `pnpm`
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install `pnpm` dependencies
        working-directory: ui
        run: pnpm install --frozen-lockfile

      - name: Setup Playwright
        working-directory: ui
        run: pnpm exec playwright install --with-deps chromium

      - name: Cache `s3-fixtures`
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./ui/fixtures/s3-fixtures

      - name: Download `gateway` container
        uses: namespace-actions/download-artifact@v1
        with:
          name: ui-tests-gateway-container-${{ github.run_id }}
          path: .

      - name: Load `gateway` container
        run: docker load < ui-tests-gateway-container-${{ github.run_id }}.tar

      - name: Build `ui` container
        run: docker buildx build -f ui/Dockerfile . -t tensorzero/ui

      - name: Start Docker containers and apply fixtures
        working-directory: ui
        run: |
          echo "FIREWORKS_ACCOUNT_ID=fake_fireworks_account" >> fixtures/.env
          echo "FIREWORKS_API_KEY=not_used" >> fixtures/.env
          echo "FIREWORKS_BASE_URL=http://mock-inference-provider:3030/fireworks/" >> fixtures/.env
          echo "OPENAI_API_KEY=not_used" >> fixtures/.env
          echo "OPENAI_BASE_URL=http://mock-inference-provider:3030/openai/" >> fixtures/.env
          echo "S3_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> fixtures/.env
          echo "S3_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> fixtures/.env
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@clickhouse:8123/tensorzero_ui_fixtures" >> fixtures/.env
          echo "TENSORZERO_GATEWAY_URL=http://gateway:3000" >> fixtures/.env
          docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml up --wait

      - name: Run UI E2E tests
        id: e2e_tests
        working-directory: ui
        env:
          TENSORZERO_CI: 1
        continue-on-error: true
        run: pnpm test-e2e

      - name: Print Docker Compose logs
        if: always()
        working-directory: ui
        run: docker compose -f fixtures/docker-compose.e2e.yml -f fixtures/docker-compose.ui.yml logs -t

      - name: Upload Playwright artifacts
        if: steps.e2e_tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            ui/playwright-report/
            ui/test-results/
          retention-days: 7

      - name: Exit if tests failed
        if: steps.e2e_tests.outcome == 'failure'
        run: exit 1
