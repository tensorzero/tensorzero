name: ClickHouse Runner Test
run-name: "Testing ClickHouse Runner Profile: ${{ github.ref }}"

on:
  push:
    branches: ["aaron/temp-clickhouse-runner"]

env:
  FORCE_COLOR: 1
  TENSORZERO_CLICKHOUSE_URL: "http://chuser:chpassword@localhost:8123/tensorzero"

jobs:
  clickhouse-tests:
    name: "ClickHouse tests (replicated: ${{ matrix.replicated }}) (version: ${{ matrix.clickhouse_version.tag }})"

    # Test tensorzero-16x32 profile after smaller ones failed
    runs-on: ${{ matrix.replicated && 'namespace-profile-tensorzero-16x32' || 'ubuntu-latest' }}
    continue-on-error: ${{ matrix.clickhouse_version.allow_failure }}
    strategy:
      matrix:
        # Only test replicated: true
        replicated: [true]
        clickhouse_version:
          - tag: "24.12-alpine"
            prefix: "24.12"
            allow_failure: false

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          shared-key: "build-gateway-cache"
          save-if: false
      - name: "Check disk space before cleanup"
        run: df -h
      # ClickHouse intermittently runs out of disk space on the `ubuntu-latest` runner
      # Use extreme disk cleanup script that frees up ~26GB of space (11-phase cleanup)
      - name: "Free up disk space"
        run: ./ci/free-disk-space.sh
      - name: Install cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb
        with:
          tool: cargo-nextest

      - name: Set ClickHouse replicated cluster name
        if: matrix.replicated == true
        run: echo "TENSORZERO_CLICKHOUSE_CLUSTER_NAME=tensorzero_e2e_tests_cluster" >> $GITHUB_ENV

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/0.6.17/install.sh | sh

      - name: Download ClickHouse fixtures
        run: uv run ./ui/fixtures/download-fixtures.py

      - name: Set up TENSORZERO_CLICKHOUSE_URL for E2E tests
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch replicated ClickHouse container for E2E tests
        if: matrix.replicated == true
        run: TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml up clickhouse-01 clickhouse-02 clickhouse-03 --wait

      # Make an HTTP request to ClickHouse and check that the version matches '${{ matrix.clickhouse_version }}'
      - name: Check ClickHouse version
        run: |
          CLICKHOUSE_VERSION=$(curl -s "http://localhost:8123/query?user=chuser&password=chpassword" --data-binary "SELECT version()")
          echo "Detected ClickHouse version: $CLICKHOUSE_VERSION"
          echo "$CLICKHOUSE_VERSION" | grep -q "${{ matrix.clickhouse_version.prefix }}" || echo "WARNING: ClickHouse version does not match expected ${{ matrix.clickhouse_version.prefix }}"

      # We run this as a separate step so that we can see live build logs
      # (and fail the job immediately if the build fails)
      - name: Build the gateway for E2E tests
        run: cargo build-e2e

      - name: Launch the gateway for E2E tests (configured for replication)
        if: matrix.replicated == true
        run: |
          cargo run-e2e --run-migrations-only &&
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=10
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Test (Rust) - Start with reduced parallelism
        run: cargo test-e2e-no-creds -j 1

      - name: Print docker compose logs (replicated)
        if: always() && matrix.replicated == true
        run: |
          TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml logs -t

      - name: Print ClickHouse error logs (replicated)
        if: always() && matrix.replicated == true
        run: |
          echo "Error logs for ClickHouse 01:"
          docker exec e2e-clickhouse-01-1 cat /var/log/clickhouse-server/clickhouse-server.err.log
          echo "Error logs for ClickHouse 02:"
          docker exec e2e-clickhouse-02-1 cat /var/log/clickhouse-server/clickhouse-server.err.log
          echo "Error logs for ClickHouse 03:"
          docker exec e2e-clickhouse-03-1 cat /var/log/clickhouse-server/clickhouse-server.err.log

      - name: Print ClickHouse trace logs (replicated)
        if: always() && matrix.replicated == true
        run: |
          echo "Trace logs for ClickHouse 01:"
          docker exec e2e-clickhouse-01-1 cat /var/log/clickhouse-server/clickhouse-server.log
          echo "Trace logs for ClickHouse 02:"
          docker exec e2e-clickhouse-02-1 cat /var/log/clickhouse-server/clickhouse-server.log
          echo "Trace logs for ClickHouse 03:"
          docker exec e2e-clickhouse-03-1 cat /var/log/clickhouse-server/clickhouse-server.log

      - name: Print container health checks (replicated)
        if: always() && matrix.replicated == true
        run: |
          echo "Health check for ClickHouse 01:"
          docker inspect --format "{{json .State.Health }}" $(docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml ps -q clickhouse-01) | jq
          echo "Health check for ClickHouse 02:"
          docker inspect --format "{{json .State.Health }}" $(docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml ps -q clickhouse-02) | jq
          echo "Health check for ClickHouse 03:"
          docker inspect --format "{{json .State.Health }}" $(docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml ps -q clickhouse-03) | jq

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt