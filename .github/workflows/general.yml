name: General Checks

on:
  merge_group:
  pull_request:
    branches: ["main"]

env:
  FORCE_COLOR: 1
  TENSORZERO_CLICKHOUSE_URL: "http://chuser:chpassword@localhost:8123/tensorzero"

jobs:
  check-docker-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Check all docker-compose.yml files
        run: ./ci/check-all-docker-compose.sh

  check-pyo3-build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        # We don't test on linux x86_64, because our main 'validate' step already does that
        # For now, we just check that the build works on our other supported platforms -
        # we don't run any tests.
        platform:
          - runner: ubuntu-22.04-arm
            target: aarch64
          - runner: windows-latest
            target: x64
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: "TensorZero PyO3 Client: Build"
        uses: PyO3/maturin-action@b3709a81b3e175ce3ede866725776fee42465311
        with:
          working-directory: clients/python-pyo3
          args: --find-interpreter

  validate:
    runs-on: namespace-profile-tensorzero-8x16

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Install Namespace CLI
        uses: namespacelabs/nscloud-setup@d1c625762f7c926a54bd39252efff0705fd11c64

      - name: Configure Namespace-powered Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@84ca8c58fdf372d6a4750476cd09b7b96ee778ca

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/0.6.4/install.sh | sh

      - name: Configure Namespace cache for Rust, Python (pip), and pnpm
        uses: namespacelabs/nscloud-cache-action@2f50e7d0f70475e6f59a55ba0f05eec9108e77cc
        with:
          cache: |
            pnpm
            rust
            uv

      - name: Install cargo-nextest, cargo-deny, and cargo-hack
        uses: taiki-e/install-action@37bdc826eaedac215f638a96472df572feab0f9b
        with:
          tool: cargo-nextest,cargo-deny,cargo-hack

      - name: Build (Rust)
        run: cargo build --workspace --verbose

      - name: Lint (Rust)
        run: |
          cargo fmt -- --check
          cargo hack clippy --all-targets --each-feature -- -D warnings

      - name: Run cargo-deny
        run: cargo deny check advisories bans

      - name: Test (Rust)
        run: |
          cargo test-unit ${{vars.CARGO_NEXTEST_ARGS}}

      - name: Install Python for python async client tests
        run: uv python install 3.9

      - name: Lint (Python:ruff)
        run: |
          uvx ruff@0.9.0 check --output-format=github --extend-select I .
          uvx ruff@0.9.0 format --check .

      - name: "TensorZero PyO3 Client: Build"
        uses: PyO3/maturin-action@b3709a81b3e175ce3ede866725776fee42465311
        with:
          working-directory: clients/python-pyo3
          args: --find-interpreter
          container: off

      - name: "Python: Pyo3 Client: Install dependencies"
        working-directory: clients/python-pyo3
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: PyO3 Client: pyright"
        working-directory: clients/python-pyo3
        run: |
          uv pip install pyright==1.1.394
          uv run pyright

      - name: "Python: PyO3 Client: stubtest"
        working-directory: clients/python-pyo3
        run: |
          uv run stubtest tensorzero.tensorzero

      - name: "Python: TensorZero Client: Install dependencies"
        working-directory: clients/python-deprecated
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: TensorZero Client: pyright"
        working-directory: clients/python-deprecated
        run: |
          uv pip install pyright==1.1.394
          uv run pyright

      - name: "Python: OpenAI Client: Install dependencies"
        working-directory: clients/openai-python
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: OpenAI Client: pyright"
        working-directory: clients/openai-python
        run: |
          uv pip install pyright==1.1.394
          uv run pyright

      - name: "Node.js: OpenAI Client: Install dependencies"
        working-directory: clients/openai-node
        run: |
          pnpm install

      - name: "Node.js: OpenAI Client: typecheck"
        working-directory: clients/openai-node
        run: |
          pnpm run typecheck

      - name: "Python: Recipes: Install dependencies"
        working-directory: recipes
        run: |
          uv venv
          uv sync

      - name: "Python: Recipes: pyright"
        working-directory: recipes
        run: |
          uv run pyright

      - name: "Node.js: OpenAI Client: lint"
        working-directory: clients/openai-node
        run: |
          pnpm run lint

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: "22.9.0"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: ui/app/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Run minijinja WASM tests
        working-directory: ui/app/utils/minijinja
        run: wasm-pack test --node --features console_error_panic_hook

      - name: Install dependencies
        working-directory: ui
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ui
        run: pnpm run lint

      - name: Run Prettier
        working-directory: ui
        run: pnpm run format

      - name: pnpm TypeScript type checking
        working-directory: ui
        run: pnpm run typecheck

      - name: Start services for ui tests
        working-directory: ui
        run: |
          echo "OPENAI_API_KEY=not_used" >> .env
          echo "FIREWORKS_API_KEY=not_used" >> .env
          echo "FIREWORKS_ACCOUNT_ID=not_used" >> .env
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_ui_fixtures" >> .env
          docker compose -f fixtures/docker-compose.yml up -d --build --force-recreate

      - name: Run ui tests
        working-directory: ui
        run: TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_ui_fixtures pnpm test
