name: General Checks

on:
  merge_group:
  pull_request:
    branches: ["main"]

env:
  FORCE_COLOR: 1
  CLICKHOUSE_URL: "http://localhost:8123/tensorzero"

jobs:
  validate:
    runs-on: ubuntu-22.04-8core

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest and cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest,cargo-deny

      - name: Build (Rust)
        run: cargo build --verbose

      - name: Lint (Rust)
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run cargo-deny
        run: cargo deny check bans

      - name: Test (Rust)
        run: |
          cargo test-unit ${{vars.CARGO_NEXTEST_ARGS}}

      - name: Lint (Python)
        run: |
          python -m pip install ruff==0.9.0
          ruff format --check .
          ruff check --output-format=github --extend-select I .

      - name: "TensorZero Python Client: pyright"
        working-directory: clients/python
        run: |
          python -m pip install -r requirements.txt
          python -m pip install pyright
          python -m pyright

      - name: "OpenAI Python Client: pyright"
        working-directory: clients/openai-python
        run: |
          python -m pip install -r requirements.txt
          python -m pip install pyright
          python -m pyright

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: ui/app/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Run minijinja WASM tests
        working-directory: ui/app/utils/minijinja
        run: wasm-pack test --node --features console_error_panic_hook

      - name: Install npm dependencies
        working-directory: ui
        run: npm install --platform=linux --legacy-peer-deps cmdk

      - name: Run ESLint
        working-directory: ui
        run: npm run lint

      - name: Run Prettier
        working-directory: ui
        run: npm run format

      - name: Run TypeScript type checking
        working-directory: ui
        run: npm run typecheck

      - name: Start services for ui tests
        working-directory: ui
        run: |
          echo "OPENAI_API_KEY=not_used" >> .env
          echo "FIREWORKS_API_KEY=not_used" >> .env
          echo "FIREWORKS_ACCOUNT_ID=not_used" >> .env
          echo "CLICKHOUSE_URL=http://localhost:8123/tensorzero" >> .env
          docker compose -f fixtures/docker-compose.yml up -d

      - name: Run ui tests
        working-directory: ui
        run: npm test
