name: General Checks

on:
  merge_group:
  pull_request:
    branches: ["main"]

env:
  FORCE_COLOR: 1
  TENSORZERO_CLICKHOUSE_URL: "http://chuser:chpassword@localhost:8123/tensorzero"

jobs:

  clickhouse-tests-cloud:
    if: github.event_name == 'merge_group'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        cloud_instance:
          - release_channel: regular
            url_secret: CLICKHOUSE_CLOUD_URL
          - release_channel: fast
            url_secret: CLICKHOUSE_CLOUD_FAST_CHANNEL_URL
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
      - name: Install cargo-nextest
        uses: taiki-e/install-action@37bdc826eaedac215f638a96472df572feab0f9b
        with:
          tool: cargo-nextest

      - name: Set up TENSORZERO_CLICKHOUSE_URL
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=${{ secrets[matrix.cloud_instance.url_secret] }}" >> $GITHUB_ENV

      - name: Wake up ClickHouse cloud
        run: |
          curl $TENSORZERO_CLICKHOUSE_URL --data-binary 'SHOW DATABASES'

      - name: Delete old ClickHouse cloud dbs
        run: ./ci/delete-clickhouse-dbs.sh

      # We run this as a separate step so that we can see live build logs
      # (and fail the job immediately if the build fails)
      - name: Build the gateway for E2E tests
        run: cargo build-e2e

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=30
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Test (Rust)
        run: cargo test-e2e-no-creds

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt

  # This is the job that we actually mark as required in the branch protection rules
  #
  # For PR ci, the 'clickhouse-tests-cloud' job will be skipped, and this job will exit successfully
  # (since the 'needs' status will be 'skipped')
  #
  # For merge_group ci, we'll create a matrix of tests for 'clickhouse-tests-cloud', and this job
  # will check all of their statuses when they finish.
  #
  # See https://github.com/orgs/community/discussions/103114#discussioncomment-8359045
  clickhouse-tests-cloud-status-check:
    if: always()
    needs: [clickhouse-tests-cloud]
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1

  check-docker-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Check all docker-compose.yml files
        run: ./ci/check-all-docker-compose.sh

  check-pyo3-build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        # We don't test on linux x86_64, because our main 'validate' step already does that
        # For now, we just check that the build works on our other supported platforms -
        # we don't run any tests.
        platform:
          - runner: ubuntu-22.04-arm
            target: aarch64
          - runner: windows-latest
            target: x64
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: "TensorZero PyO3 Client: Build"
        uses: PyO3/maturin-action@b3709a81b3e175ce3ede866725776fee42465311
        with:
          working-directory: clients/python-pyo3
          args: --find-interpreter

  validate:
    runs-on: namespace-profile-tensorzero-8x16

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Install Namespace CLI
        uses: namespacelabs/nscloud-setup@d1c625762f7c926a54bd39252efff0705fd11c64

      - name: Configure Namespace-powered Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@84ca8c58fdf372d6a4750476cd09b7b96ee778ca

      - name: Print Rust version
        run: rustc --version

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda
        with:
          version: 10

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/0.6.4/install.sh | sh

      - name: Configure Namespace cache for Rust, Python (pip), and pnpm
        uses: namespacelabs/nscloud-cache-action@2f50e7d0f70475e6f59a55ba0f05eec9108e77cc
        with:
          cache: |
            pnpm
            rust
            uv

      - name: Install cargo-nextest, cargo-deny, and cargo-hack
        uses: taiki-e/install-action@37bdc826eaedac215f638a96472df572feab0f9b
        with:
          tool: cargo-nextest,cargo-deny,cargo-hack

      - name: Build (Rust)
        run: cargo build --workspace --verbose

      - name: Lint (Rust)
        run: |
          cargo fmt -- --check
          cargo hack clippy --all-targets --each-feature -- -D warnings

      - name: Run cargo-deny
        run: cargo deny check advisories bans

      - name: Test (Rust)
        run: |
          cargo test-unit ${{vars.CARGO_NEXTEST_ARGS}}

      - name: Install Python for python async client tests
        run: uv python install 3.9

      - name: Lint (Python:ruff)
        run: |
          uvx ruff@0.9.0 check --output-format=github --extend-select I .
          uvx ruff@0.9.0 format --check .

      - name: "TensorZero PyO3 Client: Build"
        uses: PyO3/maturin-action@b3709a81b3e175ce3ede866725776fee42465311
        with:
          working-directory: clients/python-pyo3
          args: --find-interpreter
          container: off

      - name: "Python: Pyo3 Client: Install dependencies"
        working-directory: clients/python-pyo3
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: PyO3 Client: pyright"
        working-directory: clients/python-pyo3
        run: |
          uv pip install pyright==1.1.394
          uv run pyright

      - name: "Python: PyO3 Client: stubtest"
        working-directory: clients/python-pyo3
        run: |
          uv run stubtest tensorzero.tensorzero

      - name: "Python: OpenAI Client: Install dependencies"
        working-directory: clients/openai-python
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: OpenAI Client: pyright"
        working-directory: clients/openai-python
        run: |
          uv pip install pyright==1.1.394
          uv run pyright

      - name: "Node.js: OpenAI Client: Install dependencies"
        working-directory: clients/openai-node
        run: |
          pnpm install

      - name: "Node.js: OpenAI Client: typecheck"
        working-directory: clients/openai-node
        run: |
          pnpm run typecheck

      - name: "Python: Recipes: Install dependencies"
        working-directory: recipes
        run: |
          uv venv
          uv sync

      - name: "Python: Recipes: pyright"
        working-directory: recipes
        run: |
          uv run pyright

      - name: "Node.js: OpenAI Client: lint"
        working-directory: clients/openai-node
        run: |
          pnpm run lint

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: "22.9.0"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: ui/app/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Run minijinja WASM tests
        working-directory: ui/app/utils/minijinja
        run: wasm-pack test --node --features console_error_panic_hook

      - name: Install dependencies
        working-directory: ui
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ui
        run: pnpm run lint

      - name: Run Prettier
        working-directory: ui
        run: pnpm run format

      - name: pnpm TypeScript type checking
        working-directory: ui
        run: pnpm run typecheck

  clickhouse-tests:
    # We don't run many tests here, so use a normal runner with Github Actions caching
    # to avoid unnecessarily using Namespace credits (it should still always finish before
    # the main 'validate' job)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        clickhouse_version:
          - tag: "24.12-alpine"
            prefix: "24.12"
          - tag: "25.2-alpine"
            prefix: "25.2"
          - tag: "latest-alpine"
            prefix: ""

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
      - name: Install cargo-nextest
        uses: taiki-e/install-action@37bdc826eaedac215f638a96472df572feab0f9b
        with:
          tool: cargo-nextest

      - name: Set up TENSORZERO_CLICKHOUSE_URL for E2E tests
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch ClickHouse container for E2E tests
        run: TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-internal/tests/e2e/docker-compose.yml up clickhouse --wait

      # Make an HTTP request to ClickHouse and check that the version matches '${{ matrix.clickhouse_version }}'
      - name: Check ClickHouse version
        run: |
          CLICKHOUSE_VERSION=$(curl -s "http://localhost:8123/query?user=chuser&password=chpassword" --data-binary "SELECT version()")
          echo "Detected ClickHouse version: $CLICKHOUSE_VERSION"
          echo "$CLICKHOUSE_VERSION" | grep -q "${{ matrix.clickhouse_version.prefix }}" || echo "WARNING: ClickHouse version does not match expected ${{ matrix.clickhouse_version.prefix }}"

      # We run this as a separate step so that we can see live build logs
      # (and fail the job immediately if the build fails)
      - name: Build the gateway for E2E tests
        run: cargo build-e2e

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=10
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Test (Rust)
        run: cargo test-e2e-no-creds

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt

  ui-tests:
    runs-on: ubuntu-latest
    permissions:
      # Permission to checkout the repository
      contents: read
      # Permission to fetch GitHub OIDC token authentication
      id-token: write
    strategy:
      matrix:
        clickhouse_version: ["24.12-alpine", "25.2-alpine", "latest-alpine"]
    steps:
      - uses: actions/checkout@v4

      - name: Install and configure Namespace CLI
        uses: namespacelabs/nscloud-setup@v0

      - name: Configure Namespace powered Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: ui/app/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Install dependencies
        working-directory: ui
        run: pnpm install --frozen-lockfile

      - name: Start services for ui tests
        working-directory: ui
        run: |
          echo "OPENAI_API_KEY=not_used" >> fixtures/.env
          echo "FIREWORKS_API_KEY=not_used" >> fixtures/.env
          echo "FIREWORKS_ACCOUNT_ID=not_used" >> fixtures/.env
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_ui_fixtures" >> fixtures/.env
          TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version }} docker compose -f fixtures/docker-compose.yml up -d --build --force-recreate --wait

      - name: Run ui tests
        working-directory: ui
        env:
          OPENAI_API_KEY: not_used
          TENSORZERO_UI_CONFIG_PATH: fixtures/config/tensorzero.toml
          TENSORZERO_CLICKHOUSE_URL: http://chuser:chpassword@localhost:8123/tensorzero_ui_fixtures
          TENSORZERO_GATEWAY_URL: http://localhost:3000
        run: pnpm test
