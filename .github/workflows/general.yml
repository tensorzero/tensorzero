name: General Checks
run-name: "General Checks for: ${{ github.event.pull_request.title || github.ref }}"

on:
  merge_group:
    paths-ignore:
      - "docs/**"
  pull_request:
    branches: ["main"]

# When triggered from the merge queue, cancel any existing workflow runs for the same PR branch
# Otherwise, use the unique run id for the concurrency group, to prevent anything from getting cancelled
concurrency:
  group: ${{ github.event_name == 'merge_group' && format('{0}-{1}', github.workflow, github.ref) || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  TENSORZERO_CLICKHOUSE_URL: "http://chuser:chpassword@localhost:8123/tensorzero"
  R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
  R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

jobs:
  check-version-consistency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Check version consistency
        run: ./ci/check-version-consistency.sh

  # Like 'check-docker-compose', but loads the freshly built 'gateway' and 'ui' container images first
  # This checks that all of our docker-compose files work with the changes in the PR
  check-latest-docker-compose:
    needs: [build-gateway-container, build-ui-container]
    permissions:
      # Permission to checkout the repository
      contents: read
      # Permission to fetch GitHub OIDC token authentication
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Download container images
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e
        with:
          pattern: build-*-container
          merge-multiple: true

      - name: Load `gateway` and `ui` containers
        run: |
          docker load < gateway-container.tar
          docker load < ui-container.tar

      - name: Create the `object_storage` directory for the multimodal-vision-finetuning example
        run: |
          mkdir -p examples/multimodal-vision-finetuning/object_storage
          chmod 777 examples/multimodal-vision-finetuning/object_storage

      - name: Check latest docker-compose
        run: ./ci/check-all-docker-compose.sh

  # Checks our docker-compose files against the most recent published 'gateway' and 'ui' container images
  # (not the ones built for this PR)
  check-docker-compose:
    permissions:
      # Permission to checkout the repository
      contents: read
      # Permission to fetch GitHub OIDC token authentication
      id-token: write
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Set DNS
        run: echo "127.0.0.1 howdy.tensorzero.com" | sudo tee -a /etc/hosts
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # We allow the namespace builder setup to fail on Dependabot PRs and PRs from forks
      # (where the oidc token is not available)

      - name: Install Namespace CLI
        uses: namespacelabs/nscloud-setup@d1c625762f7c926a54bd39252efff0705fd11c64
        continue-on-error: ${{ github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}

      - name: Configure Namespace-powered Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@84ca8c58fdf372d6a4750476cd09b7b96ee778ca
        continue-on-error: ${{ github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}

      - name: Create the `object_storage` directory for the multimodal-vision-finetuning example
        run: |
          mkdir -p examples/multimodal-vision-finetuning/object_storage
          chmod 777 examples/multimodal-vision-finetuning/object_storage

      - name: Check all docker-compose.yml files
        run: ./ci/check-all-docker-compose.sh

  check-python-client-build:
    uses: ./.github/workflows/python-client-build.yml

  check-node-bindings:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: "22.9.0"

      - name: Install pnpm
        run: |
          for attempt in 1 2 3; do
            if npm install -g pnpm@latest; then
              break
            fi
            if [ $attempt -eq 3 ]; then
              echo "Failed to install pnpm after 3 attempts"
              exit 1
            fi
            sleep $((10 * attempt))
          done
        shell: bash

      - name: Install dependencies
        working-directory: internal/tensorzero-node
        run: pnpm install --frozen-lockfile

      - name: Build Node.js bindings
        working-directory: internal/tensorzero-node
        run: pnpm build-bindings

      - name: Check for git diff after building bindings
        id: git_diff_check
        run: git diff --exit-code

      - name: Upload bindings artifact on diff failure
        if: failure()
        uses: namespace-actions/upload-artifact@9a78c62e083914789d908952f9773e42744b9f68
        with:
          name: node-bindings
          path: internal/tensorzero-node/lib/bindings
          retention-days: 7

      - name: Check tensorzero-node bindings are properly exported
        run: pnpm --filter=tensorzero-node run check-exports

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Install Rust toolchain
        run: |
          for attempt in 1 2 3; do
            if rustup toolchain install stable && rustup default stable; then
              break
            fi
            if [ $attempt -eq 3 ]; then
              echo "Failed to install Rust toolchain after 3 attempts"
              exit 1
            fi
            sleep $((10 * attempt))
          done
        shell: bash
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          save-if: ${{ github.event_name == 'merge_group' }}
      - name: Build Rust
        run: cargo build --workspace

  validate:
    runs-on: namespace-profile-tensorzero-32x64

    timeout-minutes: 30

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # We allow the namespace builder setup to fail on Dependabot PRs and PRs from forks
      # (where the oidc token is not available)

      - name: Install Namespace CLI
        uses: namespacelabs/nscloud-setup@d1c625762f7c926a54bd39252efff0705fd11c64
        continue-on-error: ${{ github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}

      - name: Configure Namespace-powered Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@84ca8c58fdf372d6a4750476cd09b7b96ee778ca
        continue-on-error: ${{ github.event.pull_request.head.repo.full_name != github.repository || github.actor == 'dependabot[bot]' }}

      # We deliberately install our MSRV here (rather than 'stable') to ensure that everything compiles with that version
      - name: Install Rust 1.86.0
        run: |
          for attempt in 1 2 3; do
            if rustup install 1.86.0 --component clippy,rustfmt && rustup default 1.86.0; then
              break
            fi
            if [ $attempt -eq 3 ]; then
              echo "Failed to install Rust 1.86.0 after 3 attempts"
              exit 1
            fi
            sleep $((10 * attempt))
          done
        shell: bash

      - name: Print Rust version
        run: rustc --version

      - name: Setup Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: "22.9.0"

      - name: Install pnpm
        run: |
          for attempt in 1 2 3; do
            if npm install -g pnpm@latest; then
              break
            fi
            if [ $attempt -eq 3 ]; then
              echo "Failed to install pnpm after 3 attempts"
              exit 1
            fi
            sleep $((10 * attempt))
          done
        shell: bash

      - name: Install uv
        run: curl -LsSf --retry 2 --retry-delay 10 --retry-max-time 60 https://astral.sh/uv/0.6.17/install.sh | sh

      - name: Configure Namespace cache for Rust, Python (pip), and pnpm
        uses: namespacelabs/nscloud-cache-action@2f50e7d0f70475e6f59a55ba0f05eec9108e77cc
        with:
          cache: |
            pnpm
            rust
            uv

      - name: Install JS dependencies
        run: pnpm install --frozen-lockfile

      - name: check‑case‑conflict
        run: uv run --with pre-commit pre-commit run check-case-conflict --all-files

      - name: check‑executables‑have‑shebangs
        run: uv run --with pre-commit pre-commit run check-executables-have-shebangs --all-files

      - name: check‑json
        run: uv run --with pre-commit pre-commit run check-json --all-files

      - name: check‑yaml
        run: uv run --with pre-commit pre-commit run check-yaml --all-files

      - name: check‑toml
        run: uv run --with pre-commit pre-commit run check-toml --all-files

      - name: check‑xml
        run: uv run --with pre-commit pre-commit run check-xml --all-files

      - name: check‑merge‑conflict
        run: uv run --with pre-commit pre-commit run check-merge-conflict --all-files

      - name: check‑symlinks
        run: uv run --with pre-commit pre-commit run check-symlinks --all-files

      - name: check‑vcs‑permalinks
        run: uv run --with pre-commit pre-commit run check-vcs-permalinks --all-files

      - name: detect‑private‑key
        run: uv run --with pre-commit pre-commit run detect-private-key --all-files

      # We don't run these two because we want to allow template files to have trailing whitespace
      # TODO: how do we exclude minijinja files using pre-commit in GHA?
      # - name: end‑of‑file‑fixer
      #   run: uv run --with pre-commit pre-commit run end-of-file-fixer

      # - name: trailing‑whitespace
      #   run: uv run --with pre-commit pre-commit run trailing-whitespace

      - name: uv-lock
        run: |
          bash -c '
          git ls-files "**/pyproject.toml" \
            | while read f; do
                dir=$(dirname "$f")
                (cd "$dir" && uv lock --project="pyproject.toml")
              done
          '

      - name: uv-export
        run: |
          bash -c '
          git ls-files "**/pyproject.toml" \
            | while read f; do
                dir=$(dirname "$f")
                (cd "$dir" && uv export --project="pyproject.toml" --output-file=requirements.txt --quiet)
              done
          '
      - name: verify uv generated files
        run: git diff --exit-code

      # TODO: Enable this if we can figure out the invocation
      # - name: Run nb-clean
      #   run: uv run --with nb-clean nb-clean check --remove-empty-cells

      - name: Install cargo-nextest, cargo-deny, and cargo-hack
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb
        with:
          tool: cargo-nextest,cargo-deny,cargo-hack

      - name: Build (Rust)
        run: cargo build --workspace --verbose

      - name: Lint (Rust)
        run: |
          cargo fmt -- --check
          cargo hack clippy --all-targets --each-feature -- -D warnings

      - name: Run cargo-deny
        run: cargo deny check

      - name: Test (Rust)
        run: |
          cargo test-unit ${{ vars.CARGO_NEXTEST_EXTRA_ARGS }}

      - name: Install Python for python async client tests
        run: uv python install 3.9

      - name: Lint (Python:ruff)
        run: |
          uvx ruff@0.9.0 check --output-format=github --extend-select I .
          uvx ruff@0.9.0 format --check .

      - name: "Python: Pyo3 Client: Build and install dependencies"
        working-directory: clients/python
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: PyO3 Client: pyright"
        working-directory: clients/python
        run: |
          uv pip install pyright==1.1.394
          uv run pyright

      - name: "Python: PyO3 Client: stubtest"
        working-directory: clients/python
        run: |
          uv run stubtest tensorzero.tensorzero

      - name: "Node.js: Run prettier"
        run: pnpm --filter=openai-node run format

      - name: "Node.js: OpenAI Client: typecheck"
        run: pnpm --filter=openai-node run typecheck

      - name: "Node.js: OpenAI Client: lint"
        working-directory: clients/openai-node
        run: pnpm --filter=openai-node run lint

      - name: "Python: Recipes: Install dependencies"
        working-directory: recipes
        run: |
          uv venv
          uv sync

      - name: "Python: Recipes: pyright"
        working-directory: recipes
        run: |
          uv run pyright

      - name: Build npm workspace
        run: pnpm -r build

      - name: Format tensorzero-node package
        run: pnpm --filter=tensorzero-node run format:check

      - name: Lint tensorzero-node package
        run: pnpm --filter=tensorzero-node run lint:check

      - name: Typecheck tensorzero-node package
        run: pnpm --filter=tensorzero-node run typecheck

      - name: Run ESLint
        run: pnpm --filter=tensorzero-ui run lint:check

      - name: Run Prettier
        run: pnpm --filter=tensorzero-ui run format:check

      - name: pnpm TypeScript type checking
        run: pnpm --filter=tensorzero-ui run typecheck

      - name: Compile / validate notebooks
        run: ci/compile-check-notebooks.sh

      - name: Lint Helm charts
        run: find . -name "Chart.yaml" -exec dirname {} \; | xargs -I {} helm lint {}

  clickhouse-tests:
    name: "ClickHouse tests (replicated: ${{ matrix.replicated }}) (version: ${{ matrix.clickhouse_version.tag }})"

    # We don't run many tests here, so use a normal runner with Github Actions caching
    # to avoid unnecessarily using Namespace credits (it should still always finish before
    # the main 'validate' job)
    # runs-on: ${{ matrix.replicated && 'namespace-profile-tensorzero-32x64' || 'ubuntu-latest' }}
    runs-on: namespace-profile-tensorzero-32x64
    continue-on-error: ${{ matrix.clickhouse_version.allow_failure }}
    strategy:
      matrix:
        # Only include replicated: true when running in merge queue
        replicated: ${{ github.event_name == 'merge_group' && fromJSON('[true, false]') || fromJSON('[false]') }}
        clickhouse_version: ${{ github.event_name == 'merge_group' && fromJSON('[{"tag":"24.12-alpine","prefix":"24.12","allow_failure":false},{"tag":"latest-alpine","prefix":"","allow_failure":false}]') || fromJSON('[{"tag":"latest-alpine","prefix":"","allow_failure":false}]') }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Install Rust toolchain
        run: |
          for attempt in 1 2 3; do
            if rustup toolchain install stable && rustup default stable; then
              break
            fi
            if [ $attempt -eq 3 ]; then
              echo "Failed to install Rust toolchain after 3 attempts"
              exit 1
            fi
            sleep $((10 * attempt))
          done
        shell: bash
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          shared-key: "build-gateway-cache"
          save-if: false
      - name: "Check disk space before cleanup"
        run: df -h
      # ClickHouse intermittently runs out of disk space on the `ubuntu-latest` runner
      # Use extreme disk cleanup script that frees up ~26GB of space (11-phase cleanup)
      - name: "Free up disk space"
        run: ./ci/free-disk-space.sh
      - name: Install cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb
        with:
          tool: cargo-nextest

      - name: Set ClickHouse replicated cluster name
        if: matrix.replicated == true
        run: echo "TENSORZERO_CLICKHOUSE_CLUSTER_NAME=tensorzero_e2e_tests_cluster" >> $GITHUB_ENV

      - name: Install uv
        run: curl -LsSf --retry 2 --retry-delay 10 --retry-max-time 60 https://astral.sh/uv/0.6.17/install.sh | sh

      - name: Download ClickHouse fixtures
        run: uv run ./ui/fixtures/download-fixtures.py

      - name: Set up TENSORZERO_CLICKHOUSE_URL for E2E tests
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch non-replicated ClickHouse container for E2E tests
        if: matrix.replicated == false
        run: TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-core/tests/e2e/docker-compose.yml up clickhouse --wait

      - name: Launch replicated ClickHouse container for E2E tests
        if: matrix.replicated == true
        run: TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml up clickhouse-01 clickhouse-02 clickhouse-03 --wait

      # Make an HTTP request to ClickHouse and check that the version matches '${{ matrix.clickhouse_version }}'
      - name: Check ClickHouse version
        run: |
          CLICKHOUSE_VERSION=$(curl -s "http://localhost:8123/query?user=chuser&password=chpassword" --data-binary "SELECT version()")
          echo "Detected ClickHouse version: $CLICKHOUSE_VERSION"
          echo "$CLICKHOUSE_VERSION" | grep -q "${{ matrix.clickhouse_version.prefix }}" || echo "WARNING: ClickHouse version does not match expected ${{ matrix.clickhouse_version.prefix }}"

      # We run this as a separate step so that we can see live build logs
      # (and fail the job immediately if the build fails)
      - name: Build the gateway for E2E tests
        run: cargo build-e2e

      - name: Launch the gateway for E2E tests (not configured for replication)
        if: matrix.replicated == false
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=20
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Launch the gateway for E2E tests (configured for replication)
        if: matrix.replicated == true
        run: |
          cargo run-e2e --run-migrations-only &&
          cargo run-e2e > e2e_logs.txt 2>&1 &
            count=0
            max_attempts=40
            while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
              echo "Waiting for gateway to be healthy..."
              sleep 1
              count=$((count + 1))
              if [ $count -ge $max_attempts ]; then
                echo "Gateway failed to become healthy after $max_attempts attempts"
                exit 1
              fi
            done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Test (Rust)
        run: cargo test-e2e-no-creds

      - name: Print docker compose logs (replicated)
        if: always() && matrix.replicated == true
        run: |
          TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml logs -t

      - name: Print ClickHouse error logs (replicated)
        if: always() && matrix.replicated == true
        run: |
          echo "Error logs for ClickHouse 01:"
          docker exec e2e-clickhouse-01-1 cat /var/log/clickhouse-server/clickhouse-server.err.log
          echo "Error logs for ClickHouse 02:"
          docker exec e2e-clickhouse-02-1 cat /var/log/clickhouse-server/clickhouse-server.err.log
          echo "Error logs for ClickHouse 03:"
          docker exec e2e-clickhouse-03-1 cat /var/log/clickhouse-server/clickhouse-server.err.log

      - name: Print ClickHouse trace logs (replicated)
        if: always() && matrix.replicated == true
        run: |
          echo "Trace logs for ClickHouse 01:"
          docker exec e2e-clickhouse-01-1 cat /var/log/clickhouse-server/clickhouse-server.log
          echo "Trace logs for ClickHouse 02:"
          docker exec e2e-clickhouse-02-1 cat /var/log/clickhouse-server/clickhouse-server.log
          echo "Trace logs for ClickHouse 03:"
          docker exec e2e-clickhouse-03-1 cat /var/log/clickhouse-server/clickhouse-server.log

      - name: Print container health checks (replicated)
        if: always() && matrix.replicated == true
        run: |
          echo "Health check for ClickHouse 01:"
          docker inspect --format "{{json .State.Health }}" $(docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml ps -q clickhouse-01) | jq
          echo "Health check for ClickHouse 02:"
          docker inspect --format "{{json .State.Health }}" $(docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml ps -q clickhouse-02) | jq
          echo "Health check for ClickHouse 03:"
          docker inspect --format "{{json .State.Health }}" $(docker compose -f tensorzero-core/tests/e2e/docker-compose.replicated.yml ps -q clickhouse-03) | jq

      - name: Print docker compose logs (non-replicated)
        if: always() && matrix.replicated == false
        run: |
          TENSORZERO_CLICKHOUSE_VERSION=${{ matrix.clickhouse_version.tag }} docker compose -f tensorzero-core/tests/e2e/docker-compose.yml logs -t

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt

  # Run 'cargo test-optimization' against mock-inference-provider
  mock-optimization-tests:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: not_used
      FIREWORKS_API_KEY: not_used
      FIREWORKS_ACCOUNT_ID: not_used
      TOGETHER_API_KEY: not_used
      TENSORZERO_USE_MOCK_INFERENCE_PROVIDER: 1
      TENSORZERO_SKIP_LARGE_FIXTURES: 1
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Install Rust toolchain
        run: |
          for attempt in 1 2 3; do
            if rustup toolchain install stable && rustup default stable; then
              break
            fi
            if [ $attempt -eq 3 ]; then
              echo "Failed to install Rust toolchain after 3 attempts"
              exit 1
            fi
            sleep $((10 * attempt))
          done
        shell: bash
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6
        with:
          cache-provider: "buildjet"
          shared-key: "build-gateway-cache"
          save-if: false
      - name: Install cargo-nextest
        uses: taiki-e/install-action@d12e869b89167df346dd0ff65da342d1fb1202fb
        with:
          tool: cargo-nextest

      - name: Install uv
        run: curl -LsSf --retry 2 --retry-delay 10 --retry-max-time 60 https://astral.sh/uv/0.6.17/install.sh | sh

      - name: Download ClickHouse fixtures
        run: uv run ./ui/fixtures/download-fixtures.py

      - name: Cleanup disk space
        run: ./ci/free-disk-space.sh

      - name: Set up TENSORZERO_CLICKHOUSE_URL for E2E tests
        run: |
          echo "TENSORZERO_CLICKHOUSE_URL=http://chuser:chpassword@localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch ClickHouse container for E2E tests
        run: docker compose -f tensorzero-core/tests/e2e/docker-compose.yml up --wait

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
          while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
            echo "Waiting for gateway to be healthy..."
            sleep 1
          done

      - name: Test (Rust)
        run: cargo test-optimization-mock

  build-gateway-container:
    uses: ./.github/workflows/build-gateway-container.yml

  build-ui-container:
    uses: ./.github/workflows/build-ui-container.yml

  ui-tests:
    uses: ./.github/workflows/ui-tests.yml
    needs: build-gateway-container

  ui-tests-e2e:
    uses: ./.github/workflows/ui-tests-e2e.yml
    needs: [build-gateway-container, build-ui-container]
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      FIREWORKS_ACCOUNT_ID: ${{ secrets.FIREWORKS_ACCOUNT_ID }}
      FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
      S3_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # See 'ci/README.md' at the repository root for more details.
  check-all-general-jobs-passed:
    if: always()
    needs:
      [
        check-version-consistency,
        check-docker-compose,
        check-latest-docker-compose,
        check-python-client-build,
        check-node-bindings,
        build-windows,
        build-ui-container,
        build-gateway-container,
        validate,
        clickhouse-tests,
        ui-tests,
        ui-tests-e2e,
        mock-optimization-tests,
      ]
    runs-on: ubuntu-latest
    steps:
      # When running in the merge queue, jobs should never be skipped.
      # In PR CI, some jobs may be intentionally skipped (e.g. due to running from a fork, or to save money)
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled' || (github.event_name == 'merge_group' && contains(needs.*.result, 'skipped'))) }}
        run: exit 1
