name: Merge Queue Checks

on:
  merge_group:
env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }} # for E2E tests
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # for E2E tests
  AWS_REGION: "us-east-1" # for E2E tests
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # for E2E tests
  AZURE_OPENAI_API_BASE: ${{secrets.AZURE_OPENAI_API_BASE }} # for E2E tests
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }} # for E2E tests
  AZURE_OPENAI_DEPLOYMENT_ID: ${{secrets.AZURE_OPENAI_DEPLOYMENT_ID }} # for E2E tests
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }} # for E2E tests
  FORCE_COLOR: 1
  GCP_VERTEX_CREDENTIALS_PATH: ${{ github.workspace }}/gcp_jwt_key.json
  GOOGLE_AI_STUDIO_API_KEY: ${{ secrets.GOOGLE_AI_STUDIO_API_KEY }} # for E2E tests
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }} # for E2E tests
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # for E2E tests
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }} # for E2E tests
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }} # for E2E tests
  VLLM_MODEL_NAME: "microsoft/Phi-3.5-mini-instruct" # for E2E tests
  VLLM_API_BASE: ${{ secrets.VLLM_API_BASE }} # for E2E tests
  XAI_API_KEY: ${{ secrets.XAI_API_KEY }} # for E2E tests
jobs:
  live-tests:
    runs-on: ubuntu-22.04-8core

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Write GCP JWT key to file
        env:
          GCP_JWT_KEY: ${{ secrets.GCP_JWT_KEY }}
        run: echo "$GCP_JWT_KEY" > $GITHUB_WORKSPACE/gcp_jwt_key.json

      - name: Set up CLICKHOUSE_URL for E2E tests
        run: |
          echo "CLICKHOUSE_URL=http://localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch ClickHouse container for E2E tests
        run: docker compose -f gateway/tests/e2e/docker-compose.yml up -d --wait

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e &
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Run all tests (including E2E tests)
        run: |
          cargo test-all --profile ci ${{ vars.CARGO_NEXTEST_ARGS }}

      - name: Set up uv
        # uv recommends pinning a version to avoid unexpected behavior
        run: curl -LsSf https://astral.sh/uv/0.3.3/install.sh | sh

      - name: Install Python for python async client tests
        run: uv python install 3.10

      - name: Install dependencies for python client tests
        working-directory: clients
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: Run python client tests
        working-directory: clients
        run: uv run pytest

      - name: Run mypy type checking
        working-directory: clients
        run: |
          uv pip install mypy
          uv run mypy python --strict

      - name: Install dependencies for python recipes tests
        working-directory: recipes/tests
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: Run python recipes tests
        working-directory: recipes/tests
        run: uv run pytest

      - name: Terminate the gateway
        run: |
          echo "Killing gateway with pid $GATEWAY_PID"
          kill -9 $GATEWAY_PID

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: dashboard/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Run minijinja WASM tests
        working-directory: dashboard/utils/minijinja
        run: wasm-pack test --node --features console_error_panic_hook

      - name: Build Docker container for production deployment tests
        run: docker build -t tensorzero/gateway .

      - name: Set up CLICKHOUSE_URL for production deployment tests
        run: |
          echo "CLICKHOUSE_URL=http://172.17.0.1:8123/tensorzero" >> $GITHUB_ENV

      - name: Set up .env file for production deployment tests
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > examples/production-deployment/.env

      - name: Run docker compose for production deployment tests
        run: docker compose -f examples/production-deployment/docker-compose.yml up -d --wait

      - name: Run inference for production deployment tests
        run: examples/production-deployment/run_example_inference.sh

      - name: Take down docker compose for production deployment tests
        run: |
          docker compose -f examples/production-deployment/docker-compose.yml down
          docker compose -f gateway/tests/e2e/docker-compose.yml down

      - name: Install npm dependencies
        working-directory: dashboard
        run: npm install --platform=linux

      - name: Run ESLint
        working-directory: dashboard
        run: |
          npx eslint . --fix --max-warnings=0 --config eslint.config.js --cache

      - name: Run Prettier
        working-directory: dashboard
        run: |
          npx prettier --write --list-different "**/*.{js,jsx,ts,tsx,css,scss,html,json,yaml,md}" --ignore-path "**/*.ipynb"

      - name: Run TypeScript type checking
        working-directory: dashboard
        run: |
          npx tsc

      - name: Start services for dashboard tests
        run: docker compose -f dashboard/docker-compose.yml up -d --wait clickhouse gateway

      - name: Load test fixtures
        run: docker compose -f dashboard/docker-compose.yml run fixtures

      - name: Run dashboard tests
        working-directory: dashboard
        run: npm test
