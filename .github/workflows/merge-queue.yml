name: Merge Queue Checks

on:
  merge_group:
  push:

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }} # for E2E tests
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # for E2E tests
  AWS_REGION: "us-east-1" # for E2E tests
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # for E2E tests
  AZURE_OPENAI_API_BASE: ${{secrets.AZURE_OPENAI_API_BASE }} # for E2E tests
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }} # for E2E tests
  AZURE_OPENAI_DEPLOYMENT_ID: ${{secrets.AZURE_OPENAI_DEPLOYMENT_ID }} # for E2E tests
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }} # for E2E tests
  FORCE_COLOR: 1
  GCP_VERTEX_CREDENTIALS_PATH: ${{ github.workspace }}/gcp_jwt_key.json
  GOOGLE_AI_STUDIO_API_KEY: ${{ secrets.GOOGLE_AI_STUDIO_API_KEY }} # for E2E tests
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }} # for E2E tests
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # for E2E tests
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }} # for E2E tests
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }} # for E2E tests
  VLLM_MODEL_NAME: "microsoft/Phi-3.5-mini-instruct"
  VLLM_API_BASE: ${{ secrets.VLLM_API_BASE }}

jobs:
  live-tests:
    runs-on: ubuntu-22.04-8core

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Write GCP JWT key to file
        env:
          GCP_JWT_KEY: ${{ secrets.GCP_JWT_KEY }}
        run: echo "$GCP_JWT_KEY" > $GITHUB_WORKSPACE/gcp_jwt_key.json

      - name: Set up CLICKHOUSE_URL for E2E tests
        run: |
          echo "CLICKHOUSE_URL=http://localhost:8123/tensorzero" >> $GITHUB_ENV

      - name: Launch ClickHouse container for E2E tests
        run: docker compose -f gateway/tests/e2e/docker-compose.yml up -d --wait

      - name: Launch the gateway for E2E tests
        run: cargo run-e2e & echo $! > .gateway.pid

      # - name: Run all tests (including E2E tests)
      #   run: |
      #     cargo test-all --profile ci ${{ vars.CARGO_NEXTEST_ARGS }}

      # - name: Set up uv
      #   # uv recommends pinning a version to avoid unexpected behavior
      #   run: curl -LsSf https://astral.sh/uv/0.3.3/install.sh | sh

      # - name: Install Python for python async client tests
      #   working-directory: clients/python
      #   run: uv python install 3.10

      # - name: Install dependencies for python async client tests
      #   working-directory: clients/python
      #   run: uv sync --all-extras --dev

      # - name: Run python async client tests
      #   working-directory: clients/python
      #   run: uv run pytest

      - name: List all running processes
        run: ps aux

      - name: List jobs in this shell
        run: jobs

      - name: Terminate the gateway
        run: pkill -f "cargo run-e2e" || true

      - name: Build Docker container for production deployment tests
        run: docker build -t tensorzero/gateway .

      - name: Set up CLICKHOUSE_URL for production deployment tests
        run: |
          echo "CLICKHOUSE_URL=http://host.docker.internal:8123/tensorzero" >> $GITHUB_ENV
      - name: Set up .env file for production deployment tests
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > examples/production-deployment/.env

      - name: Debugging with ssh
        uses: lhotari/action-upterm@v1

      - name: Run docker compose for production deployment tests
        run: docker compose -f examples/production-deployment/docker-compose.yml up -d --wait --add-host host.docker.internal:host-gateway

      - name: Run inference for production deployment tests
        run: examples/production-deployment/run_example_inference.sh
