name: Merge Queue Checks

on:
  merge_group:

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }} # for integration/E2E tests
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # for integration/E2E tests
  AWS_REGION: "us-east-1" # for integration/E2E tests
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # for integration/E2E tests
  AZURE_OPENAI_API_BASE: ${{secrets.AZURE_OPENAI_API_BASE }} # for integration/E2E tests
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }} # for integration/E2E tests
  AZURE_OPENAI_DEPLOYMENT_ID: ${{secrets.AZURE_OPENAI_DEPLOYMENT_ID }} # for integration/E2E tests
  CLICKHOUSE_URL: "http://localhost:8123" # for E2E tests
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }} # for integration/E2E tests
  FORCE_COLOR: 1
  GCP_VERTEX_CREDENTIALS_PATH: ${{ github.workspace }}/gcp_jwt_key.json
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }} # for integration/E2E tests
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }} # for integration/E2E tests
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }} # for integration/E2E tests
  VLLM_MODEL_NAME: "microsoft/Phi-3.5-mini-instruct"
  VLLM_API_BASE: ${{ secrets.VLLM_API_BASE }}

jobs:
  live-tests:
    runs-on: ubuntu-22.04-8core

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Cargo Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Write GCP JWT key to file
        env:
          GCP_JWT_KEY: ${{ secrets.GCP_JWT_KEY }}
        run: echo "$GCP_JWT_KEY" > $GITHUB_WORKSPACE/gcp_jwt_key.json

      # NOTE:
      # Setting up and spinning down the Docker mount cache takes ~5min so it's slower than doing it from scratch right now.
      # We can re-introduce the cache if building starts taking longer than 10min.

      # - name: Cache Docker mounts
      #   uses: actions/cache@v3
      #   id: cache-docker-mounts
      #   with:
      #     path: |
      #       docker-gateway-usr-local-cargo-registry
      #       docker-gateway-usr-local-cargo-git
      #       docker-gateway-src-target
      #     key: cache-docker-mounts-${{ runner.os }}

      # - name: Inject cache into Docker
      #   uses: reproducible-containers/buildkit-cache-dance@v3.1.0
      #   with:
      #     cache-map: |
      #       {
      #         "docker-gateway-usr-local-cargo-registry": {
      #           "target": "/usr/local/cargo/registry",
      #           "id": "tensorzero-gateway-release"
      #         },
      #         "docker-gateway-usr-local-cargo-git": {
      #           "target": "/usr/local/cargo/git",
      #           "id": "tensorzero-gateway-release"
      #         },
      #         "docker-gateway-src-target": {
      #           "target": "/src/target",
      #           "id": "tensorzero-gateway-release"
      #         }
      #       }
      #     skip-extraction: ${{ steps.cache-docker-mounts.outputs.cache-hit }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: gateway
          build-args: |
            CARGO_BUILD_FLAGS=--features=e2e_tests
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Launch containers for E2E tests
        run: docker compose -f gateway/tests/e2e/docker-compose.yml up -d --wait

      - name: Run integration and E2E tests
        run: |
          cargo test-all --profile ci
