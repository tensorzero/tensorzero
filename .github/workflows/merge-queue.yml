name: Merge Queue Checks

on:
  merge_group:

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: "us-east-1"
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AZURE_OPENAI_API_BASE: ${{secrets.AZURE_OPENAI_API_BASE }}
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
  AZURE_OPENAI_DEPLOYMENT_ID: ${{secrets.AZURE_OPENAI_DEPLOYMENT_ID }}
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
  FIREWORKS_ACCOUNT_ID: ${{ secrets.FIREWORKS_ACCOUNT_ID }}
  FORCE_COLOR: 1
  GCP_VERTEX_CREDENTIALS_PATH: ${{ github.workspace }}/gcp_jwt_key.json
  GOOGLE_AI_STUDIO_API_KEY: ${{ secrets.GOOGLE_AI_STUDIO_API_KEY }}
  HYPERBOLIC_API_KEY: ${{secrets.HYPERBOLIC_API_KEY}}
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  SGLANG_API_KEY: ${{ secrets.SGLANG_API_KEY }}
  TGI_API_KEY: ${{ secrets.TGI_API_KEY }}
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
  VLLM_API_KEY: ${{ secrets.VLLM_API_KEY }}
  VLLM_API_BASE: ${{ secrets.VLLM_API_BASE }}
  VLLM_MODEL_NAME: "microsoft/Phi-3.5-mini-instruct"
  XAI_API_KEY: ${{ secrets.XAI_API_KEY }}

jobs:
  live-tests:
    runs-on: namespace-profile-tensorzero-8x16

    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Install Namespace CLI
        uses: namespacelabs/nscloud-setup@v0

      - name: Configure Namespace-powered Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/0.3.3/install.sh | sh

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Configure Namespace cache for Rust, Python (uv), and pnpm
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          cache: |
            pnpm
            rust
            uv

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Write GCP JWT key to file
        env:
          GCP_JWT_KEY: ${{ secrets.GCP_JWT_KEY }}
        run: echo "$GCP_JWT_KEY" > $GITHUB_WORKSPACE/gcp_jwt_key.json

      - name: Set up CLICKHOUSE_URL for E2E tests
        run: |
          echo "CLICKHOUSE_URL=http://localhost:8123/tensorzero_e2e_tests" >> $GITHUB_ENV

      - name: Launch ClickHouse container for E2E tests
        run: docker compose -f gateway/tests/e2e/docker-compose.yml up -d --wait

      - name: Launch the gateway for E2E tests
        run: |
          cargo run-e2e > e2e_logs.txt 2>&1 &
          while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
            echo "Waiting for gateway to be healthy..."
            sleep 1
          done
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV

      - name: Run all tests (including E2E tests)
        run: |
          cargo test-all --profile ci ${{ vars.CARGO_NEXTEST_ARGS }}

      - name: Print e2e logs
        if: always()
        run: cat e2e_logs.txt

      - name: Install Python for python async client tests
        run: uv python install 3.10

      - name: "Python: ruff"
        run: |
          uvx ruff@0.9.0 check --output-format=github --extend-select I .
          uvx ruff@0.9.0 format --check .

      - name: "Python: TensorZero Client: Install dependencies"
        working-directory: clients/python
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: TensorZero Client: pyright"
        working-directory: clients/python
        run: |
          uv pip install pyright
          uv run pyright

      - name: "Python: TensorZero Client: pytest"
        working-directory: clients/python
        run: |
          uv run pytest

      - name: "Python: OpenAI Client: Install dependencies"
        working-directory: clients/openai-python
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: OpenAI Client: pyright"
        working-directory: clients/openai-python
        run: |
          uv pip install pyright
          uv run pyright

      - name: "Python: OpenAI Client: pytest"
        working-directory: clients/openai-python
        run: |
          uv run pytest

      - name: "Python: Recipes: Install dependencies"
        working-directory: recipes/tests
        run: |
          uv venv
          uv pip sync requirements.txt

      - name: "Python: Recipes: pyright"
        working-directory: recipes/tests
        run: |
          uv pip install pyright
          uv run pyright

      - name: "Python: Recipes: pytest"
        working-directory: recipes/tests
        run: |
          uv run pytest

      - name: Terminate the gateway
        run: |
          echo "Killing gateway with pid $GATEWAY_PID"
          kill $GATEWAY_PID

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.9.0"

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Build minijinja WASM bindings
        working-directory: ui/app/utils/minijinja
        run: wasm-pack build --features console_error_panic_hook

      - name: Run minijinja WASM tests
        working-directory: ui/app/utils/minijinja
        run: wasm-pack test --node --features console_error_panic_hook

      - name: Build Docker container for production deployment tests
        run: docker build -t tensorzero/gateway .

      - name: Set up CLICKHOUSE_URL for production deployment tests
        run: |
          echo "CLICKHOUSE_URL=http://172.17.0.1:8123/tensorzero" >> $GITHUB_ENV

      - name: Set up .env file for production deployment tests
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > examples/production-deployment/.env

      - name: Run docker compose for production deployment tests
        run: docker compose -f examples/production-deployment/docker-compose.yml up -d --wait

      - name: Run inference for production deployment tests
        run: examples/production-deployment/run_example_inference.sh

      - name: Take down docker compose for production deployment tests
        run: |
          docker compose -f examples/production-deployment/docker-compose.yml down
          docker compose -f gateway/tests/e2e/docker-compose.yml down

      - name: Install dependencies
        working-directory: ui
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        working-directory: ui
        run: pnpm run lint

      - name: Run Prettier
        working-directory: ui
        run: pnpm run format

      - name: Run TypeScript type checking
        working-directory: ui
        run: pnpm run typecheck

      - name: Start services for ui tests
        working-directory: ui
        run: |
          echo "OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}}" >> .env
          echo "FIREWORKS_API_KEY=${{secrets.FIREWORKS_API_KEY}}" >> .env
          echo "FIREWORKS_ACCOUNT_ID=${{secrets.FIREWORKS_ACCOUNT_ID}}" >> .env
          echo "CLICKHOUSE_URL=http://localhost:8123/tensorzero" >> .env
          docker compose -f fixtures/docker-compose.yml up -d

      - name: Run ui tests
        working-directory: ui
        run: pnpm test

      - name: Take down ui tests
        working-directory: ui
        run: docker compose -f fixtures/docker-compose.yml down

      - name: Set up CLICKHOUSE_URL for batch tests
        run: |
          echo "CLICKHOUSE_URL=${{ secrets.CLICKHOUSE_CLOUD_URL }}" >> $GITHUB_ENV
      - name: Launch the gateway for batch tests
        run: |
          cargo run-e2e &
          echo "GATEWAY_PID=$!" >> $GITHUB_ENV
          while ! curl -s -f http://localhost:3000/health >/dev/null 2>&1; do
            echo "Waiting for gateway to be healthy..."
            sleep 1
          done

      - name: Run batch tests
        run: |
          cargo test-batch
