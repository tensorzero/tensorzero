# This workflow builds and pushes the gateway, ui, and evaluations docker images to Docker Hub
# when we tag a release.
name: Publish docker images

on:
  workflow_dispatch:
  release:
    types: [released]
  push:
    branches: ["main"]

env:
  DOCKERHUB_USER: tensorzero

jobs:
  build:
    name: Build and push Docker image to Docker Hub
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-24.04
            target: linux/amd64
          - runner: ubuntu-24.04-arm
            target: linux/arm64
        container:
          # Set the container name to a '-dev' name when this workflow is invoked by a push event
          # Otherwise, use the unsuffixed name (which will be invoked by a release or manual dispatch)
          # Unfortunately, we can't use 'env' in 'strategy.matrix'
          - name: ${{ github.event_name == 'push' && 'ui-dev' || 'ui' }}
            path: ui
          - name: ${{ github.event_name == 'push' && 'gateway-dev' || 'gateway' }}
            path: gateway
          - name: ${{ github.event_name == 'push' && 'evaluations-dev' || 'evaluations' }}
            path: evaluations

    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform.target }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.container.name }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform.target }}
          file: ./${{ matrix.container.path }}/Dockerfile
          # This is required to make '.git' available in the build context:
          # https://github.com/docker/build-push-action/issues/513#issuecomment-987951050
          context: .
          push: true
          provenance: mode=max
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          tags: ${{ env.DOCKERHUB_USER }}/${{ matrix.container.name }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.push.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.container.name }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    strategy:
      matrix:
        container:
          - name: ${{ github.event_name == 'push' && 'ui-dev' || 'ui' }}
          - name: ${{ github.event_name == 'push' && 'gateway-dev' || 'gateway' }}
          - name: ${{ github.event_name == 'push' && 'evaluations-dev' || 'evaluations' }}
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ matrix.container.name }}-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USER }}/${{ matrix.container.name }}
          flavor: |
            latest=false
          tags: |
            type=ref,event=tag,
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.event_name == 'release' && github.event.prerelease == false }}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_USER }}/${{ matrix.container.name }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_USER }}/${{ matrix.container.name }}:${{ steps.meta.outputs.version }}

  publish-helm-chart:
    name: Publish Helm chart to R2
    runs-on: ubuntu-latest
    # Only run on actual releases, not on pushes to main
    if: github.event_name == 'release'
    permissions:
      contents: read
    # Required secrets:
    # - R2_ACCESS_KEY_ID: Cloudflare R2 access key ID
    # - R2_SECRET_ACCESS_KEY: Cloudflare R2 secret access key
    # - R2_ENDPOINT_URL: Cloudflare R2 endpoint URL (e.g., https://ACCOUNT_ID.r2.cloudflarestorage.com)
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Extract version from tag
        id: version
        run: |
          # Get the tag name from the release
          VERSION="${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present
          VERSION="${VERSION#v}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Chart version will be: ${VERSION}"

      - name: Update Chart.yaml version
        run: |
          cd examples/production-deployment-k8s-helm
          # Update the version field in Chart.yaml
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.VERSION }}/" Chart.yaml
          # Update the appVersion field in Chart.yaml to match
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.version.outputs.VERSION }}\"/" Chart.yaml
          echo "Updated Chart.yaml:"
          cat Chart.yaml

      - name: Package Helm chart
        run: |
          cd examples/production-deployment-k8s-helm
          helm package .
          echo "Packaged chart:"
          ls -la tensorzero-*.tgz

      - name: Configure AWS CLI for R2
        run: |
          aws configure set aws_access_key_id ${{ secrets.R2_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.R2_SECRET_ACCESS_KEY }}
          aws configure set default.region auto
          aws configure set default.s3.signature_version s3v4

      - name: Download existing index.yaml
        continue-on-error: true
        run: |
          cd examples/production-deployment-k8s-helm
          # Try to download existing index.yaml from R2
          aws s3 cp s3://tensorzero-helm-charts/index.yaml ./existing-index.yaml \
            --endpoint-url ${{ secrets.R2_ENDPOINT_URL }} || echo "No existing index.yaml found"

      - name: Generate index.yaml
        run: |
          cd examples/production-deployment-k8s-helm
          if [ -f existing-index.yaml ]; then
            echo "Merging with existing index.yaml"
            helm repo index . --url https://helm.tensorzero.com --merge existing-index.yaml
          else
            echo "Creating new index.yaml"
            helm repo index . --url https://helm.tensorzero.com
          fi
          echo "Generated index.yaml:"
          cat index.yaml

      - name: Upload chart package to R2
        run: |
          cd examples/production-deployment-k8s-helm
          CHART_FILE=$(ls tensorzero-*.tgz)
          aws s3 cp ${CHART_FILE} s3://tensorzero-helm-charts/${CHART_FILE} \
            --endpoint-url ${{ secrets.R2_ENDPOINT_URL }}
          echo "Uploaded ${CHART_FILE} to R2"

      - name: Upload index.yaml to R2
        run: |
          cd examples/production-deployment-k8s-helm
          aws s3 cp index.yaml s3://tensorzero-helm-charts/index.yaml \
            --endpoint-url ${{ secrets.R2_ENDPOINT_URL }}
          echo "Uploaded index.yaml to R2"
