// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { AWSBedrockProvider } from "./AWSBedrockProvider";
import type { AWSSagemakerProvider } from "./AWSSagemakerProvider";
import type { AnthropicProvider } from "./AnthropicProvider";
import type { AzureProvider } from "./AzureProvider";
import type { DeepSeekProvider } from "./DeepSeekProvider";
import type { DummyProvider } from "./DummyProvider";
import type { FireworksProvider } from "./FireworksProvider";
import type { GCPVertexAnthropicProvider } from "./GCPVertexAnthropicProvider";
import type { GCPVertexGeminiProvider } from "./GCPVertexGeminiProvider";
import type { GoogleAIStudioGeminiProvider } from "./GoogleAIStudioGeminiProvider";
import type { GroqProvider } from "./GroqProvider";
import type { HyperbolicProvider } from "./HyperbolicProvider";
import type { MistralProvider } from "./MistralProvider";
import type { OpenAIProvider } from "./OpenAIProvider";
import type { OpenRouterProvider } from "./OpenRouterProvider";
import type { SGLangProvider } from "./SGLangProvider";
import type { TGIProvider } from "./TGIProvider";
import type { TogetherProvider } from "./TogetherProvider";
import type { VLLMProvider } from "./VLLMProvider";
import type { XAIProvider } from "./XAIProvider";

export type ProviderConfig =
  | ({ type: "anthropic" } & AnthropicProvider)
  | ({ type: "aws_bedrock" } & AWSBedrockProvider)
  | ({ type: "aws_sagemaker" } & AWSSagemakerProvider)
  | ({ type: "azure" } & AzureProvider)
  | ({ type: "deepseek" } & DeepSeekProvider)
  | ({ type: "fireworks" } & FireworksProvider)
  | ({ type: "gcp_vertex_anthropic" } & GCPVertexAnthropicProvider)
  | ({ type: "gcp_vertex_gemini" } & GCPVertexGeminiProvider)
  | ({ type: "google_ai_studio_gemini" } & GoogleAIStudioGeminiProvider)
  | ({ type: "groq" } & GroqProvider)
  | ({ type: "hyperbolic" } & HyperbolicProvider)
  | ({ type: "mistral" } & MistralProvider)
  | ({ type: "openai" } & OpenAIProvider)
  | ({ type: "openrouter" } & OpenRouterProvider)
  | ({ type: "sglang" } & SGLangProvider)
  | ({ type: "tgi" } & TGIProvider)
  | ({ type: "together" } & TogetherProvider)
  | ({ type: "vllm" } & VLLMProvider)
  | ({ type: "xai" } & XAIProvider)
  | ({ type: "dummy" } & DummyProvider);
