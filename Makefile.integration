# TensorZero + OpenAI Agents SDK Integration Development Makefile

.PHONY: help setup test test-pure test-integration test-integration-example clean docker-up docker-down format lint install-agents

# Default target
help: ## Show this help message
	@echo "TensorZero + OpenAI Agents SDK Integration Development"
	@echo "====================================================="
	@echo ""
	@echo "🚀 Quick Start: make quick-setup"
	@echo "💡 Usage Guide: make show-usage"  
	@echo ""
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-22s\033[0m %s\n", $$1, $$2}'

setup: ## Set up development environment
	@echo "🚀 Setting up development environment..."
	./dev_setup.sh

install-agents: ## Install TensorZero with agents integration in current environment
	@echo "📦 Installing TensorZero with Agents SDK integration..."
	cd clients/python && pip install -e ".[agents]"

show-usage: ## Show how to use the TensorZero + Agents SDK integration
	@echo "💡 TensorZero + OpenAI Agents SDK Integration Usage:"
	@echo "=================================================="
	@echo ""
	@echo "1. Install: pip install tensorzero[agents]"
	@echo ""
	@echo "2. Setup integration:"
	@echo "   import tensorzero.agents as tz_agents"
	@echo "   await tz_agents.setup_tensorzero_agents('config/tensorzero.toml')"
	@echo ""
	@echo "3. Create agent:"
	@echo "   agent = tz_agents.create_agent_from_tensorzero_function("
	@echo "       function_name='my_function', variant_name='baseline'"
	@echo "   )"
	@echo ""
	@echo "4. Use normally with Agents SDK:"
	@echo "   result = await Runner(agent=agent).run('Your question')"
	@echo ""
	@echo "✨ All TensorZero features work automatically!"

test-pure: ## Test the pure OpenAI Agents SDK implementation
	@echo "🧪 Testing pure Agents SDK implementation..."
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag-openai && \
	source .venv-pure/bin/activate && \
	python test_comparison.py

test-integration: ## Test the TensorZero + Agents SDK integration
	@echo "🧪 Testing TensorZero + Agents SDK integration..."
	cd clients/python && \
	source .venv/bin/activate && \
	python -m pytest tests/test_agents_integration.py -v

test-integration-example: ## Test the integration example
	@echo "🧪 Testing integration example..."
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag && \
	python integration_example.py

test: test-integration ## Run all tests

docker-up: ## Start TensorZero services
	@echo "🐳 Starting TensorZero services..."
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag && \
	docker-compose up -d

docker-down: ## Stop TensorZero services
	@echo "🐳 Stopping TensorZero services..."
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag && \
	docker-compose down

docker-logs: ## Show TensorZero service logs
	@echo "📋 TensorZero service logs:"
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag && \
	docker-compose logs -f

build-tensorzero: ## Build TensorZero from source
	@echo "🔨 Building TensorZero..."
	cargo build --bin tensorzero-gateway
	cargo build -p tensorzero-core

format: ## Format code
	@echo "🎨 Formatting code..."
	cd clients/python && \
	source .venv/bin/activate && \
	ruff format . && \
	cd ../../examples/rag-retrieval-augmented-generation/simple-agentic-rag-openai && \
	source .venv-pure/bin/activate && \
	ruff format .

lint: ## Lint code
	@echo "🔍 Linting code..."
	cd clients/python && \
	source .venv/bin/activate && \
	ruff check . && \
	cd ../../examples/rag-retrieval-augmented-generation/simple-agentic-rag-openai && \
	source .venv-pure/bin/activate && \
	ruff check .

clean: ## Clean up development environment
	@echo "🧹 Cleaning up..."
	rm -rf clients/python/.venv
	rm -rf examples/rag-retrieval-augmented-generation/simple-agentic-rag-openai/.venv-pure
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag && \
	docker-compose down -v

dev-shell: ## Start development shell with TensorZero integration environment
	@echo "🐚 Starting development shell..."
	cd clients/python && \
	source .venv/bin/activate && exec bash

# Development workflow targets
demo-pure: docker-up ## Run pure Agents SDK demo
	@echo "🎬 Running pure Agents SDK demo..."
	cd examples/rag-retrieval-augmented-generation/simple-agentic-rag-openai && \
	source .venv-pure/bin/activate && \
	python main.py

demo-integration: docker-up test-integration-example ## Run TensorZero integration demo
	@echo "🎬 TensorZero integration demo completed!"

# Quick start targets
quick-setup: setup demo-integration ## Quick setup and integration demo

# Environment checks
check-openai-key: ## Check if OpenAI API key is set
	@if [ -z "$$OPENAI_API_KEY" ]; then \
		echo "❌ OPENAI_API_KEY is not set"; \
		echo "   Get your key from: https://platform.openai.com/api-keys"; \
		echo "   Then run: export OPENAI_API_KEY='sk-your-key-here'"; \
		exit 1; \
	else \
		echo "✅ OPENAI_API_KEY is set"; \
	fi

check-docker: ## Check if Docker is running
	@if ! docker info &> /dev/null; then \
		echo "❌ Docker is not running"; \
		echo "   Please start Docker and try again"; \
		exit 1; \
	else \
		echo "✅ Docker is running"; \
	fi

status: check-docker check-openai-key ## Check development environment status
	@echo "✅ Development environment is ready!" 