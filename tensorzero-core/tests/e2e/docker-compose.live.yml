volumes:
  shared-tmpdir:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=8G,uid=1000,gid=1000,mode=1777

services:
  clickhouse:
    image: clickhouse/clickhouse-server:${TENSORZERO_CLICKHOUSE_VERSION:-24.12-alpine}
    environment:
      CLICKHOUSE_USER: chuser
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: chpassword
    volumes:
      # If the directory doesn't exist locally (i.e. we haven't defined a version-specific config),
      # an empty dir will get mounted in the container
      - ./clickhouse-configs/${TENSORZERO_CLICKHOUSE_VERSION:-24.12-alpine}/users.xml:/etc/clickhouse-server/users.d/users.xml
    ports:
      - "8123:8123" # HTTP port
      - "9000:9000" # Native port
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: wget --spider --tries 1 http://chuser:chpassword@clickhouse:8123/ping
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  mock-inference-provider:
    image: tensorzero/mock-inference-provider:${TENSORZERO_MOCK_INFERENCE_PROVIDER_TAG:-latest}
    build:
      context: ../../../
      dockerfile: tensorzero-core/tests/mock-inference-provider/Dockerfile
    environment:
      RUST_LOG: debug
    ports:
      - "3030:3030"
    healthcheck:
      test: wget --spider --tries 1 http://localhost:3030/status
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  minio:
    image: bitnamilegacy/minio:2025.7.23
    ports:
      - "8000:9000" # API port
      - "9001:9001" # Console port
    environment:
      MINIO_ROOT_USER: tensorzero-root
      MINIO_ROOT_PASSWORD: tensorzero-root
      MINIO_DEFAULT_BUCKETS: tensorzero-e2e-tests
    healthcheck:
      test: "mc ls local/tensorzero-e2e-tests || exit 1"
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  jaeger:
    image: jaegertracing/jaeger:2.5.0
    volumes:
      - ./jaeger-config.yaml:/jaeger/config.yaml
    #command: --set=extensions.jaeger_storage.backends.some_store.memory.max_traces=1
    command: --config /jaeger/config.yaml
    ports:
      - "16686:16686" # Browser UI
      - "4317:4317"
      - "4318:4318"
      - "5778:5778"
      - "9411:9411"
    healthcheck:
      test: ["CMD", "wget", "--spider", "--tries=1", "http://localhost:16686/"]
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  provider-proxy:
    image: tensorzero/provider-proxy:${TENSORZERO_PROVIDER_PROXY_TAG:-latest}
    build:
      context: ../../..
      dockerfile: provider-proxy/Dockerfile
      target: provider-proxy
    ports:
      - "3003:3003"
    volumes:
      # Mount cache directory for downloading cache files separately
      - ../../../ci/provider-proxy-cache:/app/ci/provider-proxy-cache
    command:
      [
        "--cache-path",
        "/app/ci/provider-proxy-cache",
        "--mode",
        "read-old-write-new",
      ]
    healthcheck:
      test:
        ["CMD", "wget", "--spider", "--tries=1", "http://localhost:3004/health"]
      start_period: 10s
      start_interval: 1s
      timeout: 1s
    depends_on:
      minio:
        condition: service_healthy

  gateway:
    image: tensorzero/gateway-e2e:${TENSORZERO_GATEWAY_TAG:-latest}
    build:
      context: ../../..
      dockerfile: tensorzero-core/tests/e2e/Dockerfile.gateway.e2e
      target: gateway
    environment:
      # Test environment variables
      TENSORZERO_GATEWAY_URL: http://gateway:3000
      TENSORZERO_CLICKHOUSE_URL: http://chuser:chpassword@clickhouse:8123/tensorzero_e2e_tests
      TENSORZERO_MINIO_URL: http://minio:9000/
      TENSORZERO_E2E_PROXY: http://provider-proxy:3003
      TENSORZERO_MOCK_INFERENCE_PROVIDER_BASE_URL: http://mock-inference-provider:3030
      BUILDKITE_COMMIT: ${BUILDKITE_COMMIT:-}
      TMPDIR: /tmp
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://jaeger:4317
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AZURE_OPENAI_API_BASE: ${AZURE_OPENAI_API_BASE:-}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-}
      AZURE_OPENAI_DEPLOYMENT_ID: ${AZURE_OPENAI_DEPLOYMENT_ID:-}
      AZURE_AI_FOUNDRY_API_KEY: ${AZURE_AI_FOUNDRY_API_KEY:-}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      FIREWORKS_API_KEY: ${FIREWORKS_API_KEY:-}
      FIREWORKS_ACCOUNT_ID: ${FIREWORKS_ACCOUNT_ID:-}
      GCP_VERTEX_CREDENTIALS_PATH: /app/gcp_jwt_key.json
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcp_jwt_key.json
      GCP_STORAGE_ACCESS_KEY_ID: ${GCP_STORAGE_ACCESS_KEY_ID:-}
      GCP_STORAGE_SECRET_ACCESS_KEY: ${GCP_STORAGE_SECRET_ACCESS_KEY:-}
      GOOGLE_AI_STUDIO_API_KEY: ${GOOGLE_AI_STUDIO_API_KEY:-}
      GROQ_API_KEY: ${GROQ_API_KEY:-}
      HYPERBOLIC_API_KEY: ${HYPERBOLIC_API_KEY:-}
      MODAL_KEY: ${MODAL_KEY:-}
      MODAL_SECRET: ${MODAL_SECRET:-}
      MISTRAL_API_KEY: ${MISTRAL_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID:-}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY:-}
      SGLANG_API_KEY: ${SGLANG_API_KEY:-}
      TGI_API_KEY: ${TGI_API_KEY:-}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY:-}
      VLLM_API_KEY: ${VLLM_API_KEY:-}
      VOYAGE_API_KEY: ${VOYAGE_API_KEY:-}
      XAI_API_KEY: ${XAI_API_KEY:-}
    command: [--config-file, tensorzero-core/tests/e2e/tensorzero.toml]
    volumes:
      # Mount the e2e directory so the config path exists inside the container
      - ./:/app/tensorzero-core/tests/e2e:ro
      # Mount the fixtures directory so template paths can be resolved
      - ../../fixtures:/app/tensorzero-core/fixtures:ro
      # Mount GCP JWT key file
      - ../../../gcp_jwt_key.json:/app/gcp_jwt_key.json:ro
      # Shared tmpdir filesystem
      - shared-tmpdir:/tmp
    depends_on:
      clickhouse:
        condition: service_healthy
      provider-proxy:
        condition: service_healthy
      minio:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    extra_hosts:
      - "howdy.tensorzero.com:127.0.0.1"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      start_period: 1s
      start_interval: 1s
      timeout: 1s
  fixtures:
    image: tensorzero/fixtures:${TENSORZERO_FIXTURES_TAG:-latest}
    build:
      context: ../../../
      dockerfile: ui/fixtures/Dockerfile
    volumes:
      - ../../../ui/fixtures:/fixtures
      - ~/.aws:/root/.aws
    environment:
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PASSWORD=chpassword
      - CLICKHOUSE_USER=chuser
      - TENSORZERO_SKIP_LARGE_FIXTURES=1
    depends_on:
      gateway:
        condition: service_healthy
    # Keep this running to make 'check-docker-compose.sh' detect that all containers are healthy
    command:
      ["bash", "-c", "cd /fixtures && ./load_fixtures.sh tensorzero_e2e_tests"]
    healthcheck:
      test: ["CMD", "test", "-f", "/load_complete.marker"]
      interval: 5s
      timeout: 1s
      retries: 48 # Retry for up to 4 minutes
      start_period: 5s # Give the script time to start

  live-tests:
    image: tensorzero/live-tests:${TENSORZERO_LIVE_TESTS_TAG:-latest}
    build:
      context: ../../..
      dockerfile: tensorzero-core/tests/e2e/Dockerfile.live
    environment:
      # Test environment variables
      TENSORZERO_GATEWAY_URL: http://gateway:3000
      TENSORZERO_CLICKHOUSE_URL: http://chuser:chpassword@clickhouse:8123/tensorzero_e2e_tests
      TENSORZERO_MINIO_URL: http://minio:9000
      TENSORZERO_MOCK_INFERENCE_PROVIDER_BASE_URL: http://mock-inference-provider:3030
      TENSORZERO_JAEGER_URL: http://jaeger:16686
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://jaeger:4317
      TENSORZERO_E2E_PROXY: http://provider-proxy:3003
      BUILDKITE_COMMIT: ${BUILDKITE_COMMIT:-}
      TMPDIR: /tmp
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AZURE_OPENAI_API_BASE: ${AZURE_OPENAI_API_BASE:-}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-}
      AZURE_OPENAI_DEPLOYMENT_ID: ${AZURE_OPENAI_DEPLOYMENT_ID:-}
      AZURE_AI_FOUNDRY_API_KEY: ${AZURE_AI_FOUNDRY_API_KEY:-}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      FIREWORKS_API_KEY: ${FIREWORKS_API_KEY:-}
      FIREWORKS_ACCOUNT_ID: ${FIREWORKS_ACCOUNT_ID:-}
      FORCE_COLOR: ${FORCE_COLOR:-1}
      GCP_VERTEX_CREDENTIALS_PATH: /app/gcp_jwt_key.json
      GOOGLE_APPLICATION_CREDENTIALS: /app/gcp_jwt_key.json
      GCP_STORAGE_ACCESS_KEY_ID: ${GCP_STORAGE_ACCESS_KEY_ID:-}
      GCP_STORAGE_SECRET_ACCESS_KEY: ${GCP_STORAGE_SECRET_ACCESS_KEY:-}
      GOOGLE_AI_STUDIO_API_KEY: ${GOOGLE_AI_STUDIO_API_KEY:-}
      GROQ_API_KEY: ${GROQ_API_KEY:-}
      HYPERBOLIC_API_KEY: ${HYPERBOLIC_API_KEY:-}
      MODAL_KEY: ${MODAL_KEY:-}
      MODAL_SECRET: ${MODAL_SECRET:-}
      MISTRAL_API_KEY: ${MISTRAL_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENROUTER_API_KEY: ${OPENROUTER_API_KEY:-}
      R2_ACCESS_KEY_ID: ${R2_ACCESS_KEY_ID:-}
      R2_SECRET_ACCESS_KEY: ${R2_SECRET_ACCESS_KEY:-}
      SGLANG_API_KEY: ${SGLANG_API_KEY:-}
      TGI_API_KEY: ${TGI_API_KEY:-}
      TOGETHER_API_KEY: ${TOGETHER_API_KEY:-}
      VLLM_API_KEY: ${VLLM_API_KEY:-}
      VOYAGE_API_KEY: ${VOYAGE_API_KEY:-}
      XAI_API_KEY: ${XAI_API_KEY:-}
      # Buildkite analytics
      BUILDKITE_ANALYTICS_TOKEN: ${BUILDKITE_ANALYTICS_TOKEN:-}
    volumes:
      - ../../../gcp_jwt_key.json:/app/gcp_jwt_key.json:ro
      - ./tensorzero.toml:/app/tensorzero-core/tests/e2e/tensorzero.toml:ro
      - ../../fixtures:/app/tensorzero-core/fixtures:ro
      - .cargo/:/app/.cargo/
      - ../../../target/nextest:/app/target/nextest
      # Shared tmpdir filesystem
      - shared-tmpdir:/tmp
    depends_on:
      gateway:
        condition: service_healthy
      fixtures:
        condition: service_completed_successfully
      clickhouse:
        condition: service_healthy
      mock-inference-provider:
        condition: service_healthy
      provider-proxy:
        condition: service_healthy
      minio:
        condition: service_healthy
