services:
  clickhouse:
    image: clickhouse/clickhouse-server:${TENSORZERO_CLICKHOUSE_VERSION:-24.12-alpine}
    environment:
      CLICKHOUSE_USER: chuser
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: chpassword
    volumes:
      # If the directory doesn't exist locally (i.e. we haven't defined a version-specific config),
      # an empty dir will get mounted in the container
      - ./clickhouse-configs/${TENSORZERO_CLICKHOUSE_VERSION:-24.12-alpine}/users.xml:/etc/clickhouse-server/users.d/users.xml
      # For S3 fixtures using file
      - ../../../ui/fixtures/s3-fixtures:/var/lib/clickhouse/user_files
    ports:
      - "8123:8123" # HTTP port
      - "9000:9000" # Native port
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: wget --spider --tries 1 http://chuser:chpassword@clickhouse:8123/ping
      start_period: 30s
      start_interval: 1s
      timeout: 1s

  gateway:
    image: tensorzero/gateway-e2e:${TENSORZERO_COMMIT_TAG}
    build:
      context: ../../..
      dockerfile: tensorzero-core/tests/e2e/Dockerfile.gateway.e2e
      target: gateway
    environment:
      TENSORZERO_CLICKHOUSE_URL: http://chuser:chpassword@clickhouse:8123/tensorzero_e2e_tests
    command: [--config-file, tensorzero-core/tests/e2e/tensorzero.toml]
    volumes:
      # Mount the e2e directory so the config path exists inside the container
      - ./:/app/tensorzero-core/tests/e2e:ro
      # Mount the fixtures directory so template paths can be resolved
      - ../../fixtures:/app/tensorzero-core/fixtures:ro
    depends_on:
      clickhouse:
        condition: service_healthy
    extra_hosts:
      - "howdy.tensorzero.com:127.0.0.1"
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      start_period: 1s
      start_interval: 1s
      timeout: 1s

  fixtures:
    image: tensorzero/fixtures:${TENSORZERO_COMMIT_TAG}
    build:
      context: ../../../
      dockerfile: ui/fixtures/Dockerfile
    volumes:
      - ../../../ui/fixtures:/fixtures
      - ~/.aws:/root/.aws
    environment:
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PASSWORD=chpassword
      - CLICKHOUSE_USER=chuser
      # - TENSORZERO_SKIP_LARGE_FIXTURES=1
    depends_on:
      gateway:
        condition: service_healthy
    command:
      ["bash", "-c", "cd /fixtures && ./load_fixtures.sh tensorzero_e2e_tests"]
    # Added healthcheck to wait for the marker file created by the script
    healthcheck:
      test: ["CMD", "test", "-f", "/load_complete.marker"]
      interval: 5s
      timeout: 1s
      retries: 48 # Retry for up to 4 minutes
      start_interval: 1s
      start_period: 300s # Give the script time to start

  clickhouse-tests:
    image: tensorzero/clickhouse-tests:${TENSORZERO_COMMIT_TAG}
    build:
      context: ../../..
      dockerfile: tensorzero-core/tests/e2e/Dockerfile.clickhouse
    environment:
      # Test environment variables
      TENSORZERO_CLICKHOUSE_URL: http://chuser:chpassword@clickhouse:8123/tensorzero_e2e_tests
      BUILDKITE_COMMIT: ${BUILDKITE_COMMIT:-}
      TENSORZERO_GATEWAY_URL: http://gateway:3000
      TENSORZERO_S3_FIXTURES_PATH: /app/ui/fixtures/s3-fixtures
      TENSORZERO_CI: 1
    volumes:
      - ./tensorzero.toml:/app/tensorzero-core/tests/e2e/tensorzero.toml:ro
      - ../../fixtures:/app/tensorzero-core/fixtures:ro
      - .cargo/:/app/.cargo/
      - ../../../target:/app/target

    depends_on:
      gateway:
        condition: service_healthy
      fixtures:
        condition: service_completed_successfully
      clickhouse:
        condition: service_healthy
